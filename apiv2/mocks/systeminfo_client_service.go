// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	io "io"

	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	systeminfo "github.com/zelat/goharbor-client/apiv2/internal/api/client/systeminfo"
)

// MockSysteminfoClientService is an autogenerated mock type for the ClientService type
type MockSysteminfoClientService struct {
	mock.Mock
}

// GetSysteminfo provides a mock function with given fields: params, authInfo, opts
func (_m *MockSysteminfoClientService) GetSysteminfo(params *systeminfo.GetSysteminfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...systeminfo.ClientOption) (*systeminfo.GetSysteminfoOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *systeminfo.GetSysteminfoOK
	if rf, ok := ret.Get(0).(func(*systeminfo.GetSysteminfoParams, runtime.ClientAuthInfoWriter, ...systeminfo.ClientOption) *systeminfo.GetSysteminfoOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*systeminfo.GetSysteminfoOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*systeminfo.GetSysteminfoParams, runtime.ClientAuthInfoWriter, ...systeminfo.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSysteminfoGetcert provides a mock function with given fields: params, authInfo, writer, opts
func (_m *MockSysteminfoClientService) GetSysteminfoGetcert(params *systeminfo.GetSysteminfoGetcertParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...systeminfo.ClientOption) (*systeminfo.GetSysteminfoGetcertOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo, writer)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *systeminfo.GetSysteminfoGetcertOK
	if rf, ok := ret.Get(0).(func(*systeminfo.GetSysteminfoGetcertParams, runtime.ClientAuthInfoWriter, io.Writer, ...systeminfo.ClientOption) *systeminfo.GetSysteminfoGetcertOK); ok {
		r0 = rf(params, authInfo, writer, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*systeminfo.GetSysteminfoGetcertOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*systeminfo.GetSysteminfoGetcertParams, runtime.ClientAuthInfoWriter, io.Writer, ...systeminfo.ClientOption) error); ok {
		r1 = rf(params, authInfo, writer, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSysteminfoVolumes provides a mock function with given fields: params, authInfo, opts
func (_m *MockSysteminfoClientService) GetSysteminfoVolumes(params *systeminfo.GetSysteminfoVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...systeminfo.ClientOption) (*systeminfo.GetSysteminfoVolumesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *systeminfo.GetSysteminfoVolumesOK
	if rf, ok := ret.Get(0).(func(*systeminfo.GetSysteminfoVolumesParams, runtime.ClientAuthInfoWriter, ...systeminfo.ClientOption) *systeminfo.GetSysteminfoVolumesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*systeminfo.GetSysteminfoVolumesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*systeminfo.GetSysteminfoVolumesParams, runtime.ClientAuthInfoWriter, ...systeminfo.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockSysteminfoClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
