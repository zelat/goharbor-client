// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"
	products "github.com/zelat/goharbor-client/apiv2/internal/legacyapi/client/products"
)

// MockProductsClientService is an autogenerated mock type for the ClientService type
type MockProductsClientService struct {
	mock.Mock
}

// DeleteChartrepoRepoChartsNameVersionLabelsID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteChartrepoRepoChartsNameVersionLabelsID(params *products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteChartrepoRepoChartsNameVersionLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabelsID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteLabelsID(params *products.DeleteLabelsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteLabelsIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteLabelsIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDImmutabletagrulesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteProjectsProjectIDImmutabletagrulesID(params *products.DeleteProjectsProjectIDImmutabletagrulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteProjectsProjectIDImmutabletagrulesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteProjectsProjectIDImmutabletagrulesIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteProjectsProjectIDImmutabletagrulesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDImmutabletagrulesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDMembersMid provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteProjectsProjectIDMembersMid(params *products.DeleteProjectsProjectIDMembersMidParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteProjectsProjectIDMembersMidOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteProjectsProjectIDMembersMidOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteProjectsProjectIDMembersMidOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDMembersMidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDMetadatasMetaName provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteProjectsProjectIDMetadatasMetaName(params *products.DeleteProjectsProjectIDMetadatasMetaNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteProjectsProjectIDMetadatasMetaNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteProjectsProjectIDMetadatasMetaNameOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteProjectsProjectIDMetadatasMetaNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDMetadatasMetaNameOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectsProjectIDWebhookPoliciesPolicyID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteProjectsProjectIDWebhookPoliciesPolicyID(params *products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistriesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteRegistriesID(params *products.DeleteRegistriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteRegistriesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteRegistriesIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteRegistriesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteRegistriesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteRegistriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteRegistriesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationPoliciesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteReplicationPoliciesID(params *products.DeleteReplicationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteReplicationPoliciesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteReplicationPoliciesIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteReplicationPoliciesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteReplicationPoliciesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsergroupsGroupID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteUsergroupsGroupID(params *products.DeleteUsergroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteUsergroupsGroupIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteUsergroupsGroupIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteUsergroupsGroupIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteUsergroupsGroupIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsersUserID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) DeleteUsersUserID(params *products.DeleteUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.DeleteUsersUserIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.DeleteUsersUserIDOK
	if rf, ok := ret.Get(0).(func(*products.DeleteUsersUserIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.DeleteUsersUserIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.DeleteUsersUserIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.DeleteUsersUserIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChartrepoRepoChartsNameVersionLabels provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetChartrepoRepoChartsNameVersionLabels(params *products.GetChartrepoRepoChartsNameVersionLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetChartrepoRepoChartsNameVersionLabelsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetChartrepoRepoChartsNameVersionLabelsOK
	if rf, ok := ret.Get(0).(func(*products.GetChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetChartrepoRepoChartsNameVersionLabelsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetChartrepoRepoChartsNameVersionLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurations provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetConfigurations(params *products.GetConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetConfigurationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetConfigurationsOK
	if rf, ok := ret.Get(0).(func(*products.GetConfigurationsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetConfigurationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetConfigurationsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetConfigurationsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealth provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetHealth(params *products.GetHealthParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetHealthOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetHealthOK
	if rf, ok := ret.Get(0).(func(*products.GetHealthParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetHealthOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetHealthOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetHealthParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabels provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetLabels(params *products.GetLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetLabelsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetLabelsOK
	if rf, ok := ret.Get(0).(func(*products.GetLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetLabelsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabelsID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetLabelsID(params *products.GetLabelsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetLabelsIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.GetLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetLabelsIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLdapGroupsSearch provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetLdapGroupsSearch(params *products.GetLdapGroupsSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetLdapGroupsSearchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetLdapGroupsSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetLdapGroupsSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetLdapGroupsSearchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLdapGroupsSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLdapGroupsSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLdapUsersSearch provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetLdapUsersSearch(params *products.GetLdapUsersSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetLdapUsersSearchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetLdapUsersSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetLdapUsersSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetLdapUsersSearchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetLdapUsersSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetLdapUsersSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDImmutabletagrules provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDImmutabletagrules(params *products.GetProjectsProjectIDImmutabletagrulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDImmutabletagrulesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDImmutabletagrulesOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDImmutabletagrulesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDImmutabletagrulesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMembers provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDMembers(params *products.GetProjectsProjectIDMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDMembersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDMembersOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDMembersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMembersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMembersMid provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDMembersMid(params *products.GetProjectsProjectIDMembersMidParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDMembersMidOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDMembersMidOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDMembersMidOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMembersMidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMetadatas provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDMetadatas(params *products.GetProjectsProjectIDMetadatasParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDMetadatasOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDMetadatasOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDMetadatasOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMetadatasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDMetadatasMetaName provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDMetadatasMetaName(params *products.GetProjectsProjectIDMetadatasMetaNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDMetadatasMetaNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDMetadatasMetaNameOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDMetadatasMetaNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDMetadatasMetaNameOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDScanner provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDScanner(params *products.GetProjectsProjectIDScannerParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDScannerOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDScannerOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDScannerParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDScannerOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDScannerOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDScannerParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDScannerCandidates provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDScannerCandidates(params *products.GetProjectsProjectIDScannerCandidatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDScannerCandidatesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDScannerCandidatesOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDScannerCandidatesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDScannerCandidatesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDScannerCandidatesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDScannerCandidatesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookEvents provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDWebhookEvents(params *products.GetProjectsProjectIDWebhookEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDWebhookEventsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDWebhookEventsOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookEventsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDWebhookEventsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookEventsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookEventsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookJobs provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDWebhookJobs(params *products.GetProjectsProjectIDWebhookJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDWebhookJobsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDWebhookJobsOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookJobsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDWebhookJobsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookJobsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookJobsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookLasttrigger provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDWebhookLasttrigger(params *products.GetProjectsProjectIDWebhookLasttriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDWebhookLasttriggerOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDWebhookLasttriggerOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookLasttriggerParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDWebhookLasttriggerOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookLasttriggerOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookLasttriggerParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookPolicies provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDWebhookPolicies(params *products.GetProjectsProjectIDWebhookPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDWebhookPoliciesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDWebhookPoliciesOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDWebhookPoliciesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookPoliciesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsProjectIDWebhookPoliciesPolicyID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetProjectsProjectIDWebhookPoliciesPolicyID(params *products.GetProjectsProjectIDWebhookPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK
	if rf, ok := ret.Get(0).(func(*products.GetProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetProjectsProjectIDWebhookPoliciesPolicyIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuotas provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetQuotas(params *products.GetQuotasParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetQuotasOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetQuotasOK
	if rf, ok := ret.Get(0).(func(*products.GetQuotasParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetQuotasOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetQuotasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetQuotasParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuotasID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetQuotasID(params *products.GetQuotasIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetQuotasIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetQuotasIDOK
	if rf, ok := ret.Get(0).(func(*products.GetQuotasIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetQuotasIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetQuotasIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetQuotasIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistries provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetRegistries(params *products.GetRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetRegistriesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetRegistriesOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetRegistriesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistriesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetRegistriesID(params *products.GetRegistriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetRegistriesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetRegistriesIDOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetRegistriesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistriesIDInfo provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetRegistriesIDInfo(params *products.GetRegistriesIDInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetRegistriesIDInfoOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetRegistriesIDInfoOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesIDInfoParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetRegistriesIDInfoOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesIDInfoOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesIDInfoParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistriesIDNamespace provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetRegistriesIDNamespace(params *products.GetRegistriesIDNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetRegistriesIDNamespaceOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetRegistriesIDNamespaceOK
	if rf, ok := ret.Get(0).(func(*products.GetRegistriesIDNamespaceParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetRegistriesIDNamespaceOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetRegistriesIDNamespaceOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetRegistriesIDNamespaceParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationAdapters provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetReplicationAdapters(params *products.GetReplicationAdaptersParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetReplicationAdaptersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetReplicationAdaptersOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationAdaptersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetReplicationAdaptersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationAdaptersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationAdaptersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationPolicies provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetReplicationPolicies(params *products.GetReplicationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetReplicationPoliciesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetReplicationPoliciesOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetReplicationPoliciesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationPoliciesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationPoliciesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetReplicationPoliciesID(params *products.GetReplicationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetReplicationPoliciesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetReplicationPoliciesIDOK
	if rf, ok := ret.Get(0).(func(*products.GetReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetReplicationPoliciesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetReplicationPoliciesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScanners provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetScanners(params *products.GetScannersParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetScannersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetScannersOK
	if rf, ok := ret.Get(0).(func(*products.GetScannersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetScannersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScannersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScannersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScannersRegistrationID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetScannersRegistrationID(params *products.GetScannersRegistrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetScannersRegistrationIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetScannersRegistrationIDOK
	if rf, ok := ret.Get(0).(func(*products.GetScannersRegistrationIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetScannersRegistrationIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScannersRegistrationIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScannersRegistrationIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScannersRegistrationIDMetadata provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetScannersRegistrationIDMetadata(params *products.GetScannersRegistrationIDMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetScannersRegistrationIDMetadataOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetScannersRegistrationIDMetadataOK
	if rf, ok := ret.Get(0).(func(*products.GetScannersRegistrationIDMetadataParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetScannersRegistrationIDMetadataOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetScannersRegistrationIDMetadataOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetScannersRegistrationIDMetadataParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearch provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetSearch(params *products.GetSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetSearchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetSearchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatistics provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetStatistics(params *products.GetStatisticsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetStatisticsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetStatisticsOK
	if rf, ok := ret.Get(0).(func(*products.GetStatisticsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetStatisticsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetStatisticsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetStatisticsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemCVEAllowlist provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetSystemCVEAllowlist(params *products.GetSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetSystemCVEAllowlistOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetSystemCVEAllowlistOK
	if rf, ok := ret.Get(0).(func(*products.GetSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetSystemCVEAllowlistOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetSystemCVEAllowlistOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsergroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsergroups(params *products.GetUsergroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsergroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsergroupsOK
	if rf, ok := ret.Get(0).(func(*products.GetUsergroupsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsergroupsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsergroupsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsergroupsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsergroupsGroupID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsergroupsGroupID(params *products.GetUsergroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsergroupsGroupIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsergroupsGroupIDOK
	if rf, ok := ret.Get(0).(func(*products.GetUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsergroupsGroupIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsergroupsGroupIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsers(params *products.GetUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsersOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersCurrent provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsersCurrent(params *products.GetUsersCurrentParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsersCurrentOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsersCurrentOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersCurrentParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsersCurrentOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersCurrentOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersCurrentParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersCurrentPermissions provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsersCurrentPermissions(params *products.GetUsersCurrentPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsersCurrentPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsersCurrentPermissionsOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersCurrentPermissionsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsersCurrentPermissionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersCurrentPermissionsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersCurrentPermissionsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersSearch provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsersSearch(params *products.GetUsersSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsersSearchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsersSearchOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsersSearchOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersSearchOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersSearchParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersUserID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) GetUsersUserID(params *products.GetUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.GetUsersUserIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.GetUsersUserIDOK
	if rf, ok := ret.Get(0).(func(*products.GetUsersUserIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.GetUsersUserIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.GetUsersUserIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.GetUsersUserIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostChartrepoRepoChartsNameVersionLabels provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostChartrepoRepoChartsNameVersionLabels(params *products.PostChartrepoRepoChartsNameVersionLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostChartrepoRepoChartsNameVersionLabelsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostChartrepoRepoChartsNameVersionLabelsOK
	if rf, ok := ret.Get(0).(func(*products.PostChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostChartrepoRepoChartsNameVersionLabelsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostChartrepoRepoChartsNameVersionLabelsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostChartrepoRepoChartsNameVersionLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostEmailPing provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostEmailPing(params *products.PostEmailPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostEmailPingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostEmailPingOK
	if rf, ok := ret.Get(0).(func(*products.PostEmailPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostEmailPingOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostEmailPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostEmailPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLabels provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostLabels(params *products.PostLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostLabelsCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostLabelsCreated
	if rf, ok := ret.Get(0).(func(*products.PostLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostLabelsCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostLabelsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostLabelsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLdapPing provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostLdapPing(params *products.PostLdapPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostLdapPingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostLdapPingOK
	if rf, ok := ret.Get(0).(func(*products.PostLdapPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostLdapPingOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostLdapPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostLdapPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostLdapUsersImport provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostLdapUsersImport(params *products.PostLdapUsersImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostLdapUsersImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostLdapUsersImportOK
	if rf, ok := ret.Get(0).(func(*products.PostLdapUsersImportParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostLdapUsersImportOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostLdapUsersImportOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostLdapUsersImportParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDImmutabletagrules provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostProjectsProjectIDImmutabletagrules(params *products.PostProjectsProjectIDImmutabletagrulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostProjectsProjectIDImmutabletagrulesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostProjectsProjectIDImmutabletagrulesOK
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostProjectsProjectIDImmutabletagrulesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDImmutabletagrulesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDImmutabletagrulesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDMembers provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostProjectsProjectIDMembers(params *products.PostProjectsProjectIDMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostProjectsProjectIDMembersCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostProjectsProjectIDMembersCreated
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostProjectsProjectIDMembersCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDMembersCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDMembersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDMetadatas provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostProjectsProjectIDMetadatas(params *products.PostProjectsProjectIDMetadatasParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostProjectsProjectIDMetadatasOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostProjectsProjectIDMetadatasOK
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostProjectsProjectIDMetadatasOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDMetadatasOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDMetadatasParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDWebhookPolicies provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostProjectsProjectIDWebhookPolicies(params *products.PostProjectsProjectIDWebhookPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostProjectsProjectIDWebhookPoliciesCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostProjectsProjectIDWebhookPoliciesCreated
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostProjectsProjectIDWebhookPoliciesCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDWebhookPoliciesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDWebhookPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostProjectsProjectIDWebhookPoliciesTest provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostProjectsProjectIDWebhookPoliciesTest(params *products.PostProjectsProjectIDWebhookPoliciesTestParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostProjectsProjectIDWebhookPoliciesTestOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostProjectsProjectIDWebhookPoliciesTestOK
	if rf, ok := ret.Get(0).(func(*products.PostProjectsProjectIDWebhookPoliciesTestParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostProjectsProjectIDWebhookPoliciesTestOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostProjectsProjectIDWebhookPoliciesTestOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostProjectsProjectIDWebhookPoliciesTestParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRegistries provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostRegistries(params *products.PostRegistriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostRegistriesCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostRegistriesCreated
	if rf, ok := ret.Get(0).(func(*products.PostRegistriesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostRegistriesCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostRegistriesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostRegistriesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRegistriesPing provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostRegistriesPing(params *products.PostRegistriesPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostRegistriesPingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostRegistriesPingOK
	if rf, ok := ret.Get(0).(func(*products.PostRegistriesPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostRegistriesPingOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostRegistriesPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostRegistriesPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostReplicationPolicies provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostReplicationPolicies(params *products.PostReplicationPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostReplicationPoliciesCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostReplicationPoliciesCreated
	if rf, ok := ret.Get(0).(func(*products.PostReplicationPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostReplicationPoliciesCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostReplicationPoliciesCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostReplicationPoliciesParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostScannersPing provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostScannersPing(params *products.PostScannersPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostScannersPingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostScannersPingOK
	if rf, ok := ret.Get(0).(func(*products.PostScannersPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostScannersPingOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostScannersPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostScannersPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSystemOidcPing provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostSystemOidcPing(params *products.PostSystemOidcPingParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostSystemOidcPingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostSystemOidcPingOK
	if rf, ok := ret.Get(0).(func(*products.PostSystemOidcPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostSystemOidcPingOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostSystemOidcPingOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostSystemOidcPingParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUsergroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostUsergroups(params *products.PostUsergroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostUsergroupsCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostUsergroupsCreated
	if rf, ok := ret.Get(0).(func(*products.PostUsergroupsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostUsergroupsCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostUsergroupsCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostUsergroupsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostUsers provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PostUsers(params *products.PostUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PostUsersCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PostUsersCreated
	if rf, ok := ret.Get(0).(func(*products.PostUsersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PostUsersCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PostUsersCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PostUsersParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurations provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutConfigurations(params *products.PutConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutConfigurationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutConfigurationsOK
	if rf, ok := ret.Get(0).(func(*products.PutConfigurationsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutConfigurationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutConfigurationsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutConfigurationsParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLabelsID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutLabelsID(params *products.PutLabelsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutLabelsIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutLabelsIDOK
	if rf, ok := ret.Get(0).(func(*products.PutLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutLabelsIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutLabelsIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutLabelsIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDImmutabletagrulesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutProjectsProjectIDImmutabletagrulesID(params *products.PutProjectsProjectIDImmutabletagrulesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutProjectsProjectIDImmutabletagrulesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutProjectsProjectIDImmutabletagrulesIDOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutProjectsProjectIDImmutabletagrulesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDImmutabletagrulesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDImmutabletagrulesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDMembersMid provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutProjectsProjectIDMembersMid(params *products.PutProjectsProjectIDMembersMidParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutProjectsProjectIDMembersMidOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutProjectsProjectIDMembersMidOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutProjectsProjectIDMembersMidOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDMembersMidOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDMembersMidParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDMetadatasMetaName provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutProjectsProjectIDMetadatasMetaName(params *products.PutProjectsProjectIDMetadatasMetaNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutProjectsProjectIDMetadatasMetaNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutProjectsProjectIDMetadatasMetaNameOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutProjectsProjectIDMetadatasMetaNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDMetadatasMetaNameOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDMetadatasMetaNameParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProjectsProjectIDWebhookPoliciesPolicyID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutProjectsProjectIDWebhookPoliciesPolicyID(params *products.PutProjectsProjectIDWebhookPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK
	if rf, ok := ret.Get(0).(func(*products.PutProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutProjectsProjectIDWebhookPoliciesPolicyIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutProjectsProjectIDWebhookPoliciesPolicyIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutQuotasID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutQuotasID(params *products.PutQuotasIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutQuotasIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutQuotasIDOK
	if rf, ok := ret.Get(0).(func(*products.PutQuotasIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutQuotasIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutQuotasIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutQuotasIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRegistriesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutRegistriesID(params *products.PutRegistriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutRegistriesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutRegistriesIDOK
	if rf, ok := ret.Get(0).(func(*products.PutRegistriesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutRegistriesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutRegistriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutRegistriesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutReplicationPoliciesID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutReplicationPoliciesID(params *products.PutReplicationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutReplicationPoliciesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutReplicationPoliciesIDOK
	if rf, ok := ret.Get(0).(func(*products.PutReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutReplicationPoliciesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutReplicationPoliciesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutReplicationPoliciesIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSystemCVEAllowlist provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutSystemCVEAllowlist(params *products.PutSystemCVEAllowlistParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutSystemCVEAllowlistOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutSystemCVEAllowlistOK
	if rf, ok := ret.Get(0).(func(*products.PutSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutSystemCVEAllowlistOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutSystemCVEAllowlistOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutSystemCVEAllowlistParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsergroupsGroupID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutUsergroupsGroupID(params *products.PutUsergroupsGroupIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutUsergroupsGroupIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutUsergroupsGroupIDOK
	if rf, ok := ret.Get(0).(func(*products.PutUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutUsergroupsGroupIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsergroupsGroupIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsergroupsGroupIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserID provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutUsersUserID(params *products.PutUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutUsersUserIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutUsersUserIDOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutUsersUserIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserIDCliSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutUsersUserIDCliSecret(params *products.PutUsersUserIDCliSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutUsersUserIDCliSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutUsersUserIDCliSecretOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDCliSecretParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutUsersUserIDCliSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDCliSecretOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDCliSecretParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserIDPassword provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutUsersUserIDPassword(params *products.PutUsersUserIDPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutUsersUserIDPasswordOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutUsersUserIDPasswordOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDPasswordParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutUsersUserIDPasswordOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDPasswordOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDPasswordParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsersUserIDSysadmin provides a mock function with given fields: params, authInfo, opts
func (_m *MockProductsClientService) PutUsersUserIDSysadmin(params *products.PutUsersUserIDSysadminParams, authInfo runtime.ClientAuthInfoWriter, opts ...products.ClientOption) (*products.PutUsersUserIDSysadminOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *products.PutUsersUserIDSysadminOK
	if rf, ok := ret.Get(0).(func(*products.PutUsersUserIDSysadminParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) *products.PutUsersUserIDSysadminOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*products.PutUsersUserIDSysadminOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*products.PutUsersUserIDSysadminParams, runtime.ClientAuthInfoWriter, ...products.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockProductsClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
