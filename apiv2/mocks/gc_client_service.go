// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gc "github.com/zelat/goharbor-client/apiv2/internal/api/client/gc"

	runtime "github.com/go-openapi/runtime"
)

// MockGcClientService is an autogenerated mock type for the ClientService type
type MockGcClientService struct {
	mock.Mock
}

// CreateGCSchedule provides a mock function with given fields: params, authInfo, opts
func (_m *MockGcClientService) CreateGCSchedule(params *gc.CreateGCScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...gc.ClientOption) (*gc.CreateGCScheduleCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gc.CreateGCScheduleCreated
	if rf, ok := ret.Get(0).(func(*gc.CreateGCScheduleParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) *gc.CreateGCScheduleCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gc.CreateGCScheduleCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gc.CreateGCScheduleParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGC provides a mock function with given fields: params, authInfo, opts
func (_m *MockGcClientService) GetGC(params *gc.GetGCParams, authInfo runtime.ClientAuthInfoWriter, opts ...gc.ClientOption) (*gc.GetGCOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gc.GetGCOK
	if rf, ok := ret.Get(0).(func(*gc.GetGCParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) *gc.GetGCOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gc.GetGCOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gc.GetGCParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCHistory provides a mock function with given fields: params, authInfo, opts
func (_m *MockGcClientService) GetGCHistory(params *gc.GetGCHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...gc.ClientOption) (*gc.GetGCHistoryOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gc.GetGCHistoryOK
	if rf, ok := ret.Get(0).(func(*gc.GetGCHistoryParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) *gc.GetGCHistoryOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gc.GetGCHistoryOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gc.GetGCHistoryParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCLog provides a mock function with given fields: params, authInfo, opts
func (_m *MockGcClientService) GetGCLog(params *gc.GetGCLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...gc.ClientOption) (*gc.GetGCLogOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gc.GetGCLogOK
	if rf, ok := ret.Get(0).(func(*gc.GetGCLogParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) *gc.GetGCLogOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gc.GetGCLogOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gc.GetGCLogParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGCSchedule provides a mock function with given fields: params, authInfo, opts
func (_m *MockGcClientService) GetGCSchedule(params *gc.GetGCScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...gc.ClientOption) (*gc.GetGCScheduleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gc.GetGCScheduleOK
	if rf, ok := ret.Get(0).(func(*gc.GetGCScheduleParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) *gc.GetGCScheduleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gc.GetGCScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gc.GetGCScheduleParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockGcClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateGCSchedule provides a mock function with given fields: params, authInfo, opts
func (_m *MockGcClientService) UpdateGCSchedule(params *gc.UpdateGCScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...gc.ClientOption) (*gc.UpdateGCScheduleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gc.UpdateGCScheduleOK
	if rf, ok := ret.Get(0).(func(*gc.UpdateGCScheduleParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) *gc.UpdateGCScheduleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gc.UpdateGCScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gc.UpdateGCScheduleParams, runtime.ClientAuthInfoWriter, ...gc.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
