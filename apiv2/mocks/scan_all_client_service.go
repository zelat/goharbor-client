// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	scan_all "github.com/zelat/goharbor-client/apiv2/internal/api/client/scan_all"
)

// MockScan_allClientService is an autogenerated mock type for the ClientService type
type MockScan_allClientService struct {
	mock.Mock
}

// CreateScanAllSchedule provides a mock function with given fields: params, authInfo, opts
func (_m *MockScan_allClientService) CreateScanAllSchedule(params *scan_all.CreateScanAllScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...scan_all.ClientOption) (*scan_all.CreateScanAllScheduleCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *scan_all.CreateScanAllScheduleCreated
	if rf, ok := ret.Get(0).(func(*scan_all.CreateScanAllScheduleParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) *scan_all.CreateScanAllScheduleCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scan_all.CreateScanAllScheduleCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scan_all.CreateScanAllScheduleParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestScanAllMetrics provides a mock function with given fields: params, authInfo, opts
func (_m *MockScan_allClientService) GetLatestScanAllMetrics(params *scan_all.GetLatestScanAllMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...scan_all.ClientOption) (*scan_all.GetLatestScanAllMetricsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *scan_all.GetLatestScanAllMetricsOK
	if rf, ok := ret.Get(0).(func(*scan_all.GetLatestScanAllMetricsParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) *scan_all.GetLatestScanAllMetricsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scan_all.GetLatestScanAllMetricsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scan_all.GetLatestScanAllMetricsParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestScheduledScanAllMetrics provides a mock function with given fields: params, authInfo, opts
func (_m *MockScan_allClientService) GetLatestScheduledScanAllMetrics(params *scan_all.GetLatestScheduledScanAllMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...scan_all.ClientOption) (*scan_all.GetLatestScheduledScanAllMetricsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *scan_all.GetLatestScheduledScanAllMetricsOK
	if rf, ok := ret.Get(0).(func(*scan_all.GetLatestScheduledScanAllMetricsParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) *scan_all.GetLatestScheduledScanAllMetricsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scan_all.GetLatestScheduledScanAllMetricsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scan_all.GetLatestScheduledScanAllMetricsParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScanAllSchedule provides a mock function with given fields: params, authInfo, opts
func (_m *MockScan_allClientService) GetScanAllSchedule(params *scan_all.GetScanAllScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...scan_all.ClientOption) (*scan_all.GetScanAllScheduleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *scan_all.GetScanAllScheduleOK
	if rf, ok := ret.Get(0).(func(*scan_all.GetScanAllScheduleParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) *scan_all.GetScanAllScheduleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scan_all.GetScanAllScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scan_all.GetScanAllScheduleParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockScan_allClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateScanAllSchedule provides a mock function with given fields: params, authInfo, opts
func (_m *MockScan_allClientService) UpdateScanAllSchedule(params *scan_all.UpdateScanAllScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...scan_all.ClientOption) (*scan_all.UpdateScanAllScheduleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *scan_all.UpdateScanAllScheduleOK
	if rf, ok := ret.Get(0).(func(*scan_all.UpdateScanAllScheduleParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) *scan_all.UpdateScanAllScheduleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*scan_all.UpdateScanAllScheduleOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scan_all.UpdateScanAllScheduleParams, runtime.ClientAuthInfoWriter, ...scan_all.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
