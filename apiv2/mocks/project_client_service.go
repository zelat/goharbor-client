// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	project "github.com/zelat/goharbor-client/v4/apiv2/internal/api/client/project"
	mock "github.com/stretchr/testify/mock"
)

// MockProjectClientService is an autogenerated mock type for the ClientService type
type MockProjectClientService struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) CreateProject(params *project.CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.CreateProjectCreated, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.CreateProjectCreated
	if rf, ok := ret.Get(0).(func(*project.CreateProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.CreateProjectCreated); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.CreateProjectCreated)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.CreateProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) DeleteProject(params *project.DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.DeleteProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.DeleteProjectOK
	if rf, ok := ret.Get(0).(func(*project.DeleteProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.DeleteProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.DeleteProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.DeleteProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) GetLogs(params *project.GetLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.GetLogsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.GetLogsOK
	if rf, ok := ret.Get(0).(func(*project.GetLogsParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.GetLogsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.GetLogsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.GetLogsParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) GetProject(params *project.GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.GetProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.GetProjectOK
	if rf, ok := ret.Get(0).(func(*project.GetProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.GetProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.GetProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.GetProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectDeletable provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) GetProjectDeletable(params *project.GetProjectDeletableParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.GetProjectDeletableOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.GetProjectDeletableOK
	if rf, ok := ret.Get(0).(func(*project.GetProjectDeletableParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.GetProjectDeletableOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.GetProjectDeletableOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.GetProjectDeletableParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectSummary provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) GetProjectSummary(params *project.GetProjectSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.GetProjectSummaryOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.GetProjectSummaryOK
	if rf, ok := ret.Get(0).(func(*project.GetProjectSummaryParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.GetProjectSummaryOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.GetProjectSummaryOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.GetProjectSummaryParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeadProject provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) HeadProject(params *project.HeadProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.HeadProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.HeadProjectOK
	if rf, ok := ret.Get(0).(func(*project.HeadProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.HeadProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.HeadProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.HeadProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) ListProjects(params *project.ListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.ListProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.ListProjectsOK
	if rf, ok := ret.Get(0).(func(*project.ListProjectsParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.ListProjectsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.ListProjectsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.ListProjectsParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockProjectClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateProject provides a mock function with given fields: params, authInfo, opts
func (_m *MockProjectClientService) UpdateProject(params *project.UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...project.ClientOption) (*project.UpdateProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.UpdateProjectOK
	if rf, ok := ret.Get(0).(func(*project.UpdateProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) *project.UpdateProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.UpdateProjectOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*project.UpdateProjectParams, runtime.ClientAuthInfoWriter, ...project.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
