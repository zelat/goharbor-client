// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	runtime "github.com/go-openapi/runtime"
	robotv1 "github.com/zelat/goharbor-client/v4/apiv2/internal/api/client/robotv1"
	mock "github.com/stretchr/testify/mock"
)

// MockRobotv1ClientService is an autogenerated mock type for the ClientService type
type MockRobotv1ClientService struct {
	mock.Mock
}

// CreateRobotV1 provides a mock function with given fields: params, authInfo, opts
func (_m *MockRobotv1ClientService) CreateRobotV1(params *robotv1.CreateRobotV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...robotv1.ClientOption) (*robotv1.CreateRobotV1Created, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *robotv1.CreateRobotV1Created
	if rf, ok := ret.Get(0).(func(*robotv1.CreateRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) *robotv1.CreateRobotV1Created); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.CreateRobotV1Created)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.CreateRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRobotV1 provides a mock function with given fields: params, authInfo, opts
func (_m *MockRobotv1ClientService) DeleteRobotV1(params *robotv1.DeleteRobotV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...robotv1.ClientOption) (*robotv1.DeleteRobotV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *robotv1.DeleteRobotV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.DeleteRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) *robotv1.DeleteRobotV1OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.DeleteRobotV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.DeleteRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRobotByIDV1 provides a mock function with given fields: params, authInfo, opts
func (_m *MockRobotv1ClientService) GetRobotByIDV1(params *robotv1.GetRobotByIDV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...robotv1.ClientOption) (*robotv1.GetRobotByIDV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *robotv1.GetRobotByIDV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.GetRobotByIDV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) *robotv1.GetRobotByIDV1OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.GetRobotByIDV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.GetRobotByIDV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRobotV1 provides a mock function with given fields: params, authInfo, opts
func (_m *MockRobotv1ClientService) ListRobotV1(params *robotv1.ListRobotV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...robotv1.ClientOption) (*robotv1.ListRobotV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *robotv1.ListRobotV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.ListRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) *robotv1.ListRobotV1OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.ListRobotV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.ListRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockRobotv1ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// UpdateRobotV1 provides a mock function with given fields: params, authInfo, opts
func (_m *MockRobotv1ClientService) UpdateRobotV1(params *robotv1.UpdateRobotV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...robotv1.ClientOption) (*robotv1.UpdateRobotV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *robotv1.UpdateRobotV1OK
	if rf, ok := ret.Get(0).(func(*robotv1.UpdateRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) *robotv1.UpdateRobotV1OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*robotv1.UpdateRobotV1OK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*robotv1.UpdateRobotV1Params, runtime.ClientAuthInfoWriter, ...robotv1.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
